{{
    config(
        materialized='incremental',
        unique_key='COMP_CHANGE_PK'
        )
}}

WITH
COMP_CHANGE_EVENTS AS (
    SELECT *
	, 'WKD' AS REC_SRC
	, TRIM(SUBSTRING(POSITION_CURRENT,1,CHARINDEX(' ',TRIM(POSITION_CURRENT) ) )) AS POSITION_CURRENT_ID
	, TRIM(SUBSTRING(POSITION_PROPOSED,1,CHARINDEX(' ',TRIM(POSITION_PROPOSED) ) )) AS POSITION_PROPOSED_ID
	, ('CC_' || TRIM(SUBSTRING(COST_CENTER_CURRENT,1,4))
		|| TRIM(SUBSTRING(COST_CENTER_CURRENT,8,4))
		|| TRIM(SUBSTRING(COST_CENTER_CURRENT,15,4))) AS PREV_CC_CODE
	, ('CC_' || TRIM(SUBSTRING(COST_CENTER_PROPOSED,1,4))
		|| TRIM(SUBSTRING(COST_CENTER_PROPOSED,8,4))
		|| TRIM(SUBSTRING(COST_CENTER_PROPOSED,15,4))) AS NEW_CC_CODE
	, ('LOC_' || SUBSTR(strtok(LOCATION_PROPOSED, '(', 2),1,6)) as NEW_LOC_ID
	, ('LOC_' || SUBSTR(strtok(LOCATION_CURRENT, '(', 2),1,6)) as PREV_LOC_ID
    FROM {{ source('STAGING','STG_WKD_COMPENSATION_CHANGE_EVENTS') }} 
),

POS AS (
    SELECT POSITION_ID
	, POSITION_SK
	, EFF_DT
	, DISC_DT
	FROM {{ ref('DIM_POSITION') }}
),

EMPLOYEE AS (
    SELECT EMP_ID AS EMPID
	, EMP_SK
	, EFF_DT
	, DISC_DT
	FROM {{ ref('DIM_EMPLOYEE') }}
),

JOB AS (
    SELECT JOB_CD
	, JOB_SK
	FROM {{ ref('DIM_JOB') }} 
),

ORG AS (--change me back to core
	SELECT COST_CENTER_CD 
    , ORG_SK 
    , RPT_EFF_DT
    , DISC_DT
    FROM {{ ref('DIM_ORGANIZATION') }}
    WHERE COST_CENTER_CD is not null
),

PLAN AS (
    SELECT PLAN_NAME
	, COMP_PLAN_SK
	, EFF_DT
	, DISC_DT
	FROM {{ ref('DIM_COMP_PLAN') }}
)

SELECT 
COMP_CHANGE_PK,
EMP_SK,
POSITION_CURR_SK, 
POSITION_PROPOSED_SK,
JOB_CD_CURR_SK, 
JOB_CD_PROPOSED_SK,
ORG_CURR_SK, 
ORG_PROPOSED_SK,
EMP_COMP_EVENT_WID,
WORKER_EVENT_PARENT_WID,
EMP_ID,
STATUS,
EFF_DT,
COMPLETED_DTM,
COMPLETED_DT,
LAST_FUNCTIONALLY_UPD_DTM,
BUSINESS_PROCESS,
WORKER_BP,
OVERALL_BP,
EMP_COMP_BP,
BP_TYPE,
BP_REASON_SENS,
COMP_CURR_SENS,
COMP_PROPOSED_SENS,
COMP_GRADE_CURR_SENS,
COMP_GRADE_PROPOSED_SENS,
COMP_GRADE_PROFILE_CURR_SENS,
COMP_GRADE_PROFILE_PROPOSED_SENS,
COMP_PLANS_CURR_SENS,
COMP_PLANS_PROPOSED_SENS,
PROPOSED_COMP_EQUALS_CURR_COMP_SENS,
BASE_PAY_CURR_SENS,
BASE_PAY_PROPOSED_SENS,
PAY_RANGE_MIN_SENS,
PAY_RANGE_MID_SENS,
PAY_RANGE_MAX_SENS,
LOADED_BY,
CREATED_BY,
RESCINDED_BY_WORKER,
RESCINDED_DT,
REC_SRC,
INS_BATCH_ID
FROM  (
SELECT 
   {{ dbt_utils.surrogate_key(['EMP_COMPENSATION_EVENT_WID'])}} AS COMP_CHANGE_PK, 
    COALESCE(EMPLOYEE.EMP_SK, '-1') AS EMP_SK,
    COALESCE(CURR_POSITION.POSITION_SK, '-1') AS POSITION_CURR_SK, 
    COALESCE(PROP_POSITION.POSITION_SK, '-1') AS POSITION_PROPOSED_SK,
    COALESCE(CURR_JOB.JOB_SK, '-1') AS JOB_CD_CURR_SK, 
    COALESCE(PROP_JOB.JOB_SK, '-1') AS JOB_CD_PROPOSED_SK,
    COALESCE(CURR_ORG.ORG_SK, '-1') AS ORG_CURR_SK, 
    COALESCE(PROP_ORG.ORG_SK, '-1') AS ORG_PROPOSED_SK,
    EMP_COMPENSATION_EVENT_WID AS EMP_COMP_EVENT_WID,
    WORKER_EVENT_PARENT_WID AS WORKER_EVENT_PARENT_WID,
    EMPLOYEEID AS EMP_ID,
    STATUS AS STATUS,
    EFFECTIVE_DT AS EFF_DT,
    COMPLETED_DTM AS COMPLETED_DTM,
    COMPLETED_DT AS COMPLETED_DT,
    LAST_FUNCTIONALLY_UPDATED_DTM AS LAST_FUNCTIONALLY_UPD_DTM,
    BUSINESS_PROCESS AS BUSINESS_PROCESS,
    WORKER_BUSINESS_PROCESS AS WORKER_BP,
    OVERALL_BUSINESS_PROCESS AS OVERALL_BP,
    EMPLOYEE_COMPENSATION_BP AS EMP_COMP_BP,
    BP_TYPE AS BP_TYPE,
    BP_REASON_SENS AS BP_REASON_SENS,
    COMPENSATION_CURRENT_SENS AS COMP_CURR_SENS,
    COMPENSATION_PROPOSED_SENS AS COMP_PROPOSED_SENS,
    COMPENSATION_GRADE_CURRENT_SENS AS COMP_GRADE_CURR_SENS,
    COMPENSATION_GRADE_PROPOSED_SENS AS COMP_GRADE_PROPOSED_SENS,
    COMPENSATION_GRADE_PROFILE_CURRENT_SENS AS COMP_GRADE_PROFILE_CURR_SENS,
    COMPENSATION_GRADE_PROFILE_PROPOSED_SENS AS COMP_GRADE_PROFILE_PROPOSED_SENS,
    COMPENSATION_PLANS_CURRENT_SENS AS COMP_PLANS_CURR_SENS,
    COMPENSATION_PLANS_PROPOSED_SENS AS COMP_PLANS_PROPOSED_SENS,
    PROPOSED_COMPENSATION_EQUALS_CURRENT_COMPENSATION_SENS AS PROPOSED_COMP_EQUALS_CURR_COMP_SENS,
    BASE_PAY_CURRENT_SENS AS BASE_PAY_CURR_SENS,
    BASE_PAY_PROPOSED_SENS AS BASE_PAY_PROPOSED_SENS,
    PAY_RANGE_MINIMUM_SENS AS PAY_RANGE_MIN_SENS,
    PAY_RANGE_MIDPOINT_SENS AS PAY_RANGE_MID_SENS,
    PAY_RANGE_MAXIMUM_SENS AS PAY_RANGE_MAX_SENS,
    LOADED_BY AS LOADED_BY,
    CREATED_BY AS CREATED_BY,
    RESCINDED_BY_WORKER AS RESCINDED_BY_WORKER,
    DATE_RESCINDED_DT AS RESCINDED_DT,
    REC_SRC AS REC_SRC,
    TO_NUMBER(TO_VARCHAR(CURRENT_TIMESTAMP, 'YYYYMMDDHH24MISS')) as INS_BATCH_ID,
    ROW_NUMBER() OVER(PARTITION BY EMP_COMPENSATION_EVENT_WID ORDER BY COMPLETED_DT DESC) RN
FROM COMP_CHANGE_EVENTS
LEFT JOIN EMPLOYEE
	ON COMP_CHANGE_EVENTS.EMPLOYEEID = EMPLOYEE.EMPID
	AND TO_DATE(COMP_CHANGE_EVENTS.COMPLETED_DT) BETWEEN TO_DATE(EMPLOYEE.EFF_DT) AND TO_DATE(EMPLOYEE.DISC_DT)
LEFT JOIN POS as CURR_POSITION
	ON COMP_CHANGE_EVENTS.POSITION_CURRENT_ID = CURR_POSITION.POSITION_ID  
	AND TO_DATE(COMP_CHANGE_EVENTS.COMPLETED_DT) BETWEEN TO_DATE(CURR_POSITION.EFF_DT) AND TO_DATE(CURR_POSITION.DISC_DT)
LEFT JOIN POS as PROP_POSITION 
	ON COMP_CHANGE_EVENTS.POSITION_PROPOSED_ID = PROP_POSITION.POSITION_ID 
	AND TO_DATE(COMP_CHANGE_EVENTS.COMPLETED_DT) BETWEEN TO_DATE(PROP_POSITION.EFF_DT) AND TO_DATE(PROP_POSITION.DISC_DT)
LEFT JOIN JOB AS CURR_JOB
	ON COMP_CHANGE_EVENTS.JOB_CODE_CURRENT = CURR_JOB.JOB_CD
LEFT JOIN JOB AS PROP_JOB
	ON COMP_CHANGE_EVENTS.JOB_CODE_PROPOSED = PROP_JOB.JOB_CD
LEFT JOIN ORG AS CURR_ORG
	ON COMP_CHANGE_EVENTS.PREV_CC_CODE = CURR_ORG.COST_CENTER_CD
LEFT JOIN ORG AS PROP_ORG
	ON COMP_CHANGE_EVENTS.NEW_CC_CODE = PROP_ORG.COST_CENTER_CD
{% if is_incremental() %}
    WHERE (COMP_CHANGE_EVENTS.COMPLETED_DT >= '{{ get_max_event_time('COMPLETED_DT') }}'
        OR 
    COMP_CHANGE_PK IN (
        SELECT COMP_CHANGE_PK FROM {{ this }}
        WHERE EMP_SK = '-1' OR POSITION_CURR_SK = '-1' OR POSITION_PROPOSED_SK = '-1'
        OR JOB_CD_CURR_SK = '-1' OR JOB_CD_PROPOSED_SK = '-1'
        OR ORG_CURR_SK = '-1' OR ORG_PROPOSED_SK = '-1'
        )
    )
{% endif %}
)WHERE RN=1
